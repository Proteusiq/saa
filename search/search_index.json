{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Saa","text":"<p>Making Time Speak! \ud83c\udf99\ufe0f Translating time into colloquial spoken expressions</p> <p></p> <p>Saa allows you to effortlessly translate time into colloquial spoken expressions. The word <code>saa</code> means <code>hour|time</code> in Swahili, and this package aims to humanify time expression across languages. It is build using pure Python standard libraries.</p> <pre><code>from datetime import time\nfrom saa import Clock\n\nclock = Clock(\"en\")\nclock(\"11:15\") # 'quarter past eleven'\n\nur = Clock(\"da\")\nt = time(hour=7, minute=30)\nur(t) # 'halvotte'\n\nmuda = Clock(\"sw\")\nmuda(\"7:29\") # 'saa moja na dakika ishirini na tisa asubuhi'\n\nclock = Clock(\"zh\")\nclock(\"11:34\") # '\u5341\u4e00\u70b9\u4e09\u5341\u56db'\n\nclock = Clock(\"ru\")\nclock(\"12:17\") # '\u0434\u0432\u0435\u043d\u0430\u0434\u0446\u0430\u0442\u044c \u0441\u0435\u043c\u043d\u0430\u0434\u0446\u0430\u0442\u044c'\n\n</code></pre>"},{"location":"#features","title":"Features","text":"<ul> <li>Convert time into spoken expressions in various languages.</li> <li>Easy-to-use API with a simple and intuitive design.</li> <li>Pure Python implementation with no external dependencies.</li> <li>Extensible architecture for adding support for additional languages using the plugin design pattern.</li> <li>Compatible with Python 3.6 and higher.</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>You can install Saa using pip:</p> <pre><code>pip install -U saa\n</code></pre>"},{"location":"#quick-start","title":"Quick Start","text":"<p>Here's a simple example to get you started:</p> <pre><code>from saa import Clock\n\n# Create a Clock instance with the desired language (e.g., \"en\" for English)\nclock = Clock(\"en\")\n\n# Translate time into a human-friendly spoken expression\n# supports also datetime and time. .e.g. time(hour=11, minute=45)\nspoken_time = clock(\"11:45\")\n\nprint(spoken_time)\n# Output: \"quarter to twelve\"\n</code></pre> Using Saa with Swarm \ud83e\udd9c\ud83d\udd17 <pre><code>from datetime import datetime\nfrom typing import Literal\n\nfrom openai import OpenAI\nfrom saa import Clock\nfrom swarm import Agent, Swarm\n\nollama_client = OpenAI(base_url=\"http://localhost:11434/v1\", api_key=\"NotNeeded\",)\n\nclient = Swarm(client=ollama_client)\n\n\ndef get_spoken_time(language: Literal[\"en\", \"da\", \"sw\",]) -&gt; str:\n    \"\"\"\n    Get spoken time:\n       language: iso code for a language\n    \"\"\"\n    clock = Clock(language)\n    now = datetime.now()\n    results = clock(now)\n    print(results)\n    return results\n\n\ndef transfer_to_ur(message) -&gt; Agent:\n    print(f\"The Message: {message}\")\n    _ = message\n    return ur\n\n\n# list of open source model supporting tools https://ollama.com/search?c=tools\n\npreben = Agent(\n    name=\"Preben\",\n    instructions=\"You are Preben. Function operator\",\n    functions=[transfer_to_ur],  # type: ignore\n    model=\"smollm2\",\n)\n\nur = Agent(\n    name=\"Ur\",\n    instructions=\"Use get_spoken_time to answer what time it is a given language.\",\n    functions=[get_spoken_time],  # type: ignore\n    model=\"qwen2.5\",\n)\n\nresponse = client.run(\n    agent=preben,\n    messages=[{\"role\": \"user\", \"content\": \"Ask what time it is in Danish?\"}],\n)\n\nprint(response.messages[-1][\"content\"])\n\n  ```\n![CleanShot 2024-11-12 at 11 54 51@2x](https://github.com/user-attachments/assets/a2f56b15-a488-410e-b8f6-08b7123a46a2)\n\n&lt;/details&gt;\n\n---\n\n&lt;details&gt;\n  &lt;summary&gt;Adding New Language \ud83d\udcbe&lt;/summary&gt;\n\nUsing `Kiswahili` as an example of how to add a new language\n 1. Create a folder under `saa/luga` directory, using the ISO 639-1 language code, with dunder init python file.\n ```bash\n mkdir saa/luga/sw &amp;&amp; touch saa/luga/sw/__init__.py\n ```\n\n 2. Contents of  `__init__.py` must have the following pattern\n ```python\nfrom dataclasses import dataclass\nfrom saa.core.language import Luga\n\n\n@dataclass(init=False, eq=False, repr=False, frozen=False)\nclass LanguageName(Luga):\n    ...\n\nclass Language(LanguageName):\n    pass\n ```\n\nSo for `Swahili` the skeleton of `saa/luga/sw/__init__.py` would be:\n\n```python\n...\n\n@dataclass(init=False, eq=False, repr=False, frozen=False)\nclass Swahili(Luga):\n    ...\n\nclass Language(Swahili):\n    pass\n...\n</code></pre>   Since we are implementing `Luga`, our tasks now are to implement both the properties (`time`, `number_connector`, `connect_format`) and static methods (`time_logic`, `post_logic`).  In Swahili `class`, time is expressed in terms of hour first and then minutes. time_indicator is a placeholder for whatever changing logic, e.g. minute or minutes. For Swahili the logic is what part of the day it is, morning, noon, evenning or night.   <pre><code>time = {\n    \"past\": \"saa {hour} na dakika {minute} time_indicator\",\n    \"to\": \"saa {hour} kasoro dakika {minute} time_indicator\",\n    0: \"saa {hour} time_indicator\",\n    15: \"saa {hour} na robo time_indicator\",\n    45: \"saa {hour} kasorobo time_indicator\",\n    30: \"saa {hour} na nusu time_indicator\",\n}\n</code></pre>   The numbers connector is Swahili is `na`, and the connection format is \"{tens_digits @ index 0} {[number_connector] @ index 1} {ones_digits @ index 2}\"   <pre><code>number_connector = \"na\"\nconnect_format = \"{0} {1} {2}\"\n</code></pre>   Given the implementations of Numbers converter, will include 11-19 even though we could deduced them as in 20-50s. The numbers are as following:   <pre><code>numbers = {\n    0: \"sifuri\",\n    1: \"moja\",\n    2: \"mbili\",\n    3: \"tatu\",\n    4: \"nne\",\n    5: \"tano\",\n    6: \"sita\",\n    7: \"saba\",\n    8: \"nane\",\n    9: \"tisa\",\n    10: \"kumi\",\n    11: \"kumi na moja\",\n    12: \"kumi na mbili\",\n    13: \"kumi na tatu\",\n    14: \"kumi na nne\",\n    15: \"kumi na tano\",\n    16: \"kumi na sita\",\n    17: \"kumi na saba\",\n    18: \"kumi na nane\",\n    19: \"kumi na tisa\",\n    20: \"ishirini\",\n    30: \"thelathini\",\n    40: \"arobaini\",\n    50: \"hamsini\",\n}\n</code></pre>   The major task is on time logic. In Swahili, 7 AM is the first hour in the morning (asubuhi), while 7 PM is the first hour in the evenning (jioni). 6 AM is the 12th hour in the morning ( asubuhi), while 6 PM is the 12th hour in the evenning(jioni).   <pre><code>\"\"\"\n 0 - 11 asubuhi \n 12 - 15 mchana \n 16 - 19 jioni\n 20 - 23 usiku \n\"\"\"\n\nday_divisions = {\n        0: \"asubuhi\",\n        1: \"asubuhi\",\n        2: \"asubuhi\",\n        3: \"asubuhi\",\n        4: \"asubuhi\",\n        5: \"asubuhi\",\n        6: \"asubuhi\",\n        7: \"asubuhi\",\n        8: \"asubuhi\",\n        9: \"asubuhi\",\n        10: \"asubuhi\",\n        11: \"asubuhi\",\n        12: \"mchana\",\n        13: \"mchana\",\n        14: \"mchana\",\n        15: \"mchana\",\n        16: \"jioni\",\n        17: \"jioni\",\n        18: \"jioni\",\n        19: \"jioni\",\n        20: \"usiku\",\n        21: \"usiku\",\n        22: \"usiku\",\n        23: \"usiku\",\n    }\n\n    @staticmethod\n    def post_logic(text: str) -&gt; str:\n        return text\n</code></pre>   Time to write tests. Duplicate English or Danish test_number and test_clock folders, and replace them with new language. See Swahili tests."},{"location":"#supported-languages","title":"Supported Languages","text":"<p>Saa currently supports the following languages:</p> <ul> <li>English (<code>en</code>)</li> <li>Danish (<code>da</code>)</li> <li>Swahili (<code>sw</code>)</li> <li>Chinese (<code>zh</code>)</li> <li>Russian (<code>ru</code>)</li> <li>German (<code>de</code>) # review needed</li> </ul> <p>Coming ... - French (<code>fr</code>) - Spanish (<code>es</code>) - Italian (<code>it</code>)</p>"},{"location":"#extending-language-support","title":"Extending Language Support","text":"<p>One of the key strengths of Saa is its extensible architecture, allowing you to easily add support for additional languages. To add a new language, follow these steps:</p> <ol> <li>Create a new directory under the <code>saa/luga</code> directory, using the ISO 639-1 language code as the filename (e.g., <code>fr</code> for French) and create a Python <code>__init__.py</code>.</li> <li>Implement the necessary functions in the new file to translate time into spoken expressions of the target language.</li> <li>Test the new language integration thoroughly to ensure accurate and reliable translations.</li> <li>Consider submitting a pull request to contribute your new language support to the main Saa repository.</li> </ol> <p>We welcome contributions from the community to expand language support and make Saa even more versatile!</p>"},{"location":"#contributing","title":"Contributing","text":"<p>If you'd like to contribute to Saa, please follow the guidelines outlined in the CONTRIBUTING.md file. We appreciate your help in making this package better.</p>"},{"location":"#license","title":"License","text":"<p>Saa is released under the MIT License. Feel free to use, modify, and distribute this package as per the terms of the license.</p>"},{"location":"#acknowledgments","title":"Acknowledgments","text":"<p>We would like to express our future gratitude to the developers of French, Spanish, German, and Italian language plugins for their valuable contributions to the Saa package. \ud83e\udd23</p>"},{"location":"#contact","title":"Contact","text":"<p>For any questions, suggestions, or feedback, please reach out to our team at praysonpigmail.com. <p>Let Saa simplify time for you and enhance the way you communicate it across languages!</p>"},{"location":"api_docs/","title":"API documentation","text":""},{"location":"api_docs/#clock","title":"Clock","text":""},{"location":"api_docs/#src.saa.clock.Clock","title":"Clock","text":"<pre><code>Clock(language: str)\n</code></pre>"},{"location":"api_docs/#src.saa.clock.Clock.convert","title":"convert","text":"<pre><code>convert(time: TimeType) -&gt; str\n</code></pre> <p>Transform time to spoken expressions</p> <p>Parameters:</p> Name Type Description Default <code>time</code> <code>TimeType</code> <p>string, time or datetime object</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>spoken expressions</p>"},{"location":"api_docs/#src.saa.clock.inputs","title":"inputs","text":"<pre><code>inputs(_: TimeType) -&gt; time\n</code></pre> <p>Input Parser</p> <p>Accepts string, time or datetime and return time object</p> <p>Parameters:</p> Name Type Description Default <code>_</code> <code>TimeType</code> <p>string, time or datetime object</p> required <p>Raises:</p> Type Description <code>NotImplementedError</code> <p>shell for dispatching</p> <p>Returns:</p> Name Type Description <code>time</code> <code>time</code> <p>python time object</p>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#unreleased","title":"Unreleased","text":""}]}